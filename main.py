import telebot
import sqlite3
import time
import threading
from telebot import types

bot = telebot.TeleBot("7642647034:AAG6yAZa04apmOPJF52aB98NBCzSi6jMWO8")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
conn = sqlite3.connect('genotcoin.db', check_same_thread=False)
cursor = conn.cursor()


def init_db():
    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS users (
        id INTEGER PRIMARY KEY,
        name TEXT,
        mining_speed REAL DEFAULT 0.2,
        coins REAL DEFAULT 0.0,
        last_mined INTEGER DEFAULT 0,
        equipment TEXT DEFAULT ''
    )''')

    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS equipment (
        id INTEGER PRIMARY KEY,
        name TEXT,
        category TEXT,
        level INTEGER,
        cost REAL,
        speed REAL,
        description TEXT,
        upgrade_cost REAL,
        upgrade_speed REAL
    )''')

    # –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
    equipment_data = [
        (1, 'NVIDIA 3080', 'GPU', 1, 100, 0.5, '–ë–∞–∑–æ–≤–∞—è –≤–∏–¥–µ–æ–∫–∞—Ä—Ç–∞', 200, 0.3),
        (2, 'AMD RX 6800 XT', 'GPU', 1, 80, 0.4, '–≠–Ω–µ—Ä–≥–æ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ', 150, 0.2),
        (3, 'Antminer S19', 'ASIC', 2, 500, 2.0, 'ASIC-–º–∞–π–Ω–µ—Ä –¥–ª—è Bitcoin', 1000, 0.8),
        (4, 'Intel i9-12900K', 'CPU', 1, 300, 1.2, '–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä —Å Hyper-Threading', 500, 0.5),
        (5, 'NVIDIA 4090', 'GPU', 3, 1000, 3.0, '–§–ª–∞–≥–º–∞–Ω—Å–∫–∞—è –º–æ–¥–µ–ª—å', 2000, 1.0),
        (6, 'Bitmain WhatsMiner M30S', 'ASIC', 3, 2000, 8.0, '–≠–∫—Å–ø–µ—Ä—Ç–Ω—ã–π ASIC-–º–∞–π–Ω–µ—Ä', 5000, 2.5),
        (7, 'Radeon VII', 'GPU', 2, 400, 1.5, '–ü–æ–¥–¥–µ—Ä–∂–∫–∞ Equihash', 800, 0.7),
        (8, 'Xilinx Alveo U50', 'FPGA', 1, 150, 0.7, '–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ FPGA-—á–∏–ø—ã', 300, 0.4)
    ]
    cursor.executemany('INSERT OR IGNORE INTO equipment VALUES (?,?,?,?,?,?,?,?,?)', equipment_data)
    conn.commit()


init_db()


# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
def main_menu():
    markup = types.InlineKeyboardMarkup()
    markup.row(
        types.InlineKeyboardButton("üìä –ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile"),
        types.InlineKeyboardButton("üèÜ –†–µ–π—Ç–∏–Ω–≥", callback_data="rating")
    )
    markup.row(types.InlineKeyboardButton("üõ†Ô∏è –ü—Ä–æ–∫–∞—á–∫–∞", callback_data="upgrade_menu"))
    return markup


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start'])
def start(message):
    user_id = message.from_user.id
    cursor.execute('INSERT OR IGNORE INTO users (id, name) VALUES (?, ?)',
                   (user_id, message.from_user.username))
    conn.commit()
    bot.send_message(user_id, "üöÄ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ GenotCoin –ú–∞–π–Ω–∏–Ω–≥!", reply_markup=main_menu())


# –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –º–∞–π–Ω–∏–Ω–≥–∞
def mine_coins():
    while True:
        try:
            current_time = int(time.time())
            cursor.execute('SELECT id, mining_speed, last_mined FROM users')
            users = cursor.fetchall()

            for user in users:
                user_id, speed, last_mined = user

                if last_mined == 0:  # –ü–µ—Ä–≤–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
                    cursor.execute('UPDATE users SET last_mined = ? WHERE id = ?',
                                   (current_time, user_id))
                    continue

                elapsed = current_time - last_mined
                if elapsed > 0:
                    coins_earned = speed * (elapsed / 60)  # –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –≤ –º–∏–Ω—É—Ç–∞—Ö
                    cursor.execute('''
                        UPDATE users 
                        SET coins = coins + ?, 
                            last_mined = ?
                        WHERE id = ?
                    ''', (coins_earned, current_time, user_id))

            conn.commit()
            time.sleep(10)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –º–∞–π–Ω–∏–Ω–≥–∞: {e}")


# –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å
@bot.callback_query_handler(func=lambda call: call.data == 'profile')
def show_profile(call):
    try:
        cursor.execute('''
            SELECT name, mining_speed, coins, equipment 
            FROM users 
            WHERE id = ?
        ''', (call.from_user.id,))
        result = cursor.fetchone()

        if not result:
            bot.answer_callback_query(call.id, "–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)
            return

        name, speed, coins, equipment = result
        equipment_list = []

        if equipment:
            for eq in equipment.split(','):
                if eq:
                    parts = eq.split('|')
                    if len(parts) >= 2:
                        equipment_list.append(f"{parts[0]} (–£—Ä. {parts[1]})")

        response_text = (
            f"üî∑ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n\n"
            f"üë§ –ò–º—è: {name or '–ê–Ω–æ–Ω–∏–º'}\n"
            f"‚ö° –°–∫–æ—Ä–æ—Å—Ç—å –º–∞–π–Ω–∏–Ω–≥–∞: {speed:.2f} GenoCoin/–º–∏–Ω\n"
            f"üí∞ –ë–∞–ª–∞–Ω—Å: {coins:.2f} GenoCoin\n"
            f"üõ† –û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ: {', '.join(equipment_list) or '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}"
        )

        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=response_text,
            reply_markup=main_menu()
        )

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è: {e}")
        bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è", show_alert=True)


# –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–π—Ç–∏–Ω–≥
@bot.callback_query_handler(func=lambda call: call.data == 'rating')
def show_rating(call):
    try:
        cursor.execute('''
            SELECT name, coins 
            FROM users 
            WHERE coins > 0 
            ORDER BY coins DESC 
            LIMIT 10
        ''')
        top_users = cursor.fetchall()

        if not top_users:
            bot.answer_callback_query(call.id, "–†–µ–π—Ç–∏–Ω–≥ –ø–æ–∫–∞ –ø—É—Å—Ç! –°—Ç–∞–Ω—å—Ç–µ –ø–µ—Ä–≤—ã–º!", show_alert=True)
            return

        rating_text = "üèÜ –¢–æ–ø-10 –º–∞–π–Ω–µ—Ä–æ–≤:\n\n"
        for index, (username, coins) in enumerate(top_users, 1):
            rating_text += f"{index}. {username or '–ê–Ω–æ–Ω–∏–º'} ‚Äî {coins:.2f} GenoCoin\n"

        rating_text += f"\nüïí –û–±–Ω–æ–≤–ª–µ–Ω–æ: {time.strftime('%H:%M:%S')}"

        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=rating_text,
            reply_markup=main_menu()
        )

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞: {e}")
        bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–π—Ç–∏–Ω–≥–∞", show_alert=True)


# –ú–µ–Ω—é –ø—Ä–æ–∫–∞—á–∫–∏
@bot.callback_query_handler(func=lambda call: call.data == 'upgrade_menu')
def show_upgrade_menu(call):
    markup = types.InlineKeyboardMarkup()
    markup.row(
        types.InlineKeyboardButton("üå± –£—Ä–æ–≤–µ–Ω—å 1", callback_data="level_1"),
        types.InlineKeyboardButton("‚ú® –£—Ä–æ–≤–µ–Ω—å 2", callback_data="level_2")
    )
    markup.row(
        types.InlineKeyboardButton("üî• –£—Ä–æ–≤–µ–Ω—å 3", callback_data="level_3"),
        types.InlineKeyboardButton("‚á¶ –ù–∞–∑–∞–¥", callback_data="back_to_menu")
    )
    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text="–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è:",
        reply_markup=markup
    )


# –ü–æ–∫–∞–∑–∞—Ç—å –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –ø–æ —É—Ä–æ–≤–Ω—è–º
@bot.callback_query_handler(func=lambda call: call.data.startswith('level_'))
def show_equipment(call):
    try:
        level = call.data.split('_')[1]
        cursor.execute('SELECT * FROM equipment WHERE level = ?', (level,))
        equipment = cursor.fetchall()

        if not equipment:
            bot.answer_callback_query(call.id, "–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ —ç—Ç–æ–≥–æ —É—Ä–æ–≤–Ω—è –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ!", show_alert=True)
            return

        markup = types.InlineKeyboardMarkup()
        for item in equipment:
            btn_text = (
                f"{item[1]} | üí∞{item[4]} | "
                f"‚ö°{item[5]}/–º–∏–Ω | {item[6]}"
            )
            markup.add(types.InlineKeyboardButton(btn_text, callback_data=f"buy_{item[0]}"))

        markup.add(types.InlineKeyboardButton("‚á¶ –ù–∞–∑–∞–¥", callback_data="upgrade_menu"))

        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=f"üõ† –û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ {level} —É—Ä–æ–≤–Ω—è:",
            reply_markup=markup
        )

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è: {e}")
        bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è", show_alert=True)


# –ü–æ–∫—É–ø–∫–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
@bot.callback_query_handler(func=lambda call: call.data.startswith('buy_'))
def buy_equipment(call):
    try:
        eq_id = int(call.data.split('_')[1])
        cursor.execute('SELECT * FROM equipment WHERE id = ?', (eq_id,))
        eq = cursor.fetchone()

        if not eq:
            bot.answer_callback_query(call.id, "–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!", show_alert=True)
            return

        user_id = call.from_user.id
        cursor.execute('SELECT coins, equipment FROM users WHERE id = ?', (user_id,))
        balance, equipment = cursor.fetchone()

        if balance < eq[4]:
            bot.answer_callback_query(call.id, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!", show_alert=True)
            return

        # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ
        new_equipment = f"{equipment},{eq[1]}|{eq[3]}" if equipment else f"{eq[1]}|{eq[3]}"

        cursor.execute('''
            UPDATE users 
            SET coins = coins - ?,
                mining_speed = mining_speed + ?,
                equipment = ?
            WHERE id = ?
        ''', (eq[4], eq[5], new_equipment, user_id))

        conn.commit()
        bot.answer_callback_query(call.id, f"‚úÖ –£—Å–ø–µ—à–Ω–∞—è –ø–æ–∫—É–ø–∫–∞: {eq[1]}!", show_alert=True)
        show_equipment(call)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏: {e}")
        bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ", show_alert=True)


# –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@bot.callback_query_handler(func=lambda call: call.data == 'back_to_menu')
def back_to_menu(call):
    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        reply_markup=main_menu()
    )


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    mining_thread = threading.Thread(target=mine_coins)
    mining_thread.daemon = True
    mining_thread.start()

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    bot.polling(none_stop=True)